#!/bin/bash

log_info() {
  printf "\n\e[0;35m $1\e[0m\n\n"
}

log_warn() {
  printf "\e[0;33m $1\e[0m\n"
}

ssh_cleanup() {
    if [ -d ".ssh" ]; then
        log_info "Cleaning up project SSH configuration.."
        rm -rf .ssh
    fi
}

start() {
    log_info "Fetching latest HPC Toolset Images.."
    docker compose pull

    log_info "Starting HPC Toolset Cluster.."
    docker compose up -d --no-build

    # Create project-specific SSH configuration
    mkdir -p .ssh
    cat > .ssh/config << EOF
Host frontend
    HostName localhost
    Port 6222
    User hpcadmin
    StrictHostKeyChecking no
    UserKnownHostsFile $(pwd)/.ssh/known_hosts
    LogLevel ERROR
    PasswordAuthentication yes
EOF
    chmod 600 .ssh/config
    touch .ssh/known_hosts
    chmod 600 .ssh/known_hosts

    log_info "OnDemand URL: https://localhost:3443"
    log_info "SSH access: ssh -F .ssh/config frontend (password: ilovelinux)"
}

stop() {
    log_info "Stopping HPC Toolset Cluster containers.."
    docker compose stop
}

destroy() {
    log_info "Stopping and removing HPC Toolset Cluster containers and volumes.."
    docker compose stop && \
    docker compose rm -f -v && \
    docker compose down -v
    
    ssh_cleanup
}

cleanup() {
    log_warn "** WARNING: This will remove all container images and you'll need to re-download **"
    log_warn "You probably want to try running the 'destroy' command first."
    echo ""
    read -p "Do you want to proceed? (yes/no) " yn

    if [[ $yn == y* ]]; then
        log_info "Removing HPC Toolset containers and images.."
        destroy
        docker rmi $(docker images -f "reference=gbuchanan/hpc-demo*" -q) 2>/dev/null || true
        # Also clean up legacy ubccr/hpcts images if they exist
        docker rmi $(docker images -f "reference=ubccr/hpcts*" -q) 2>/dev/null || true
        
        # Ensure SSH files are cleaned up even if destroy had issues
        ssh_cleanup
    else
        log_info "cleanup cancelled. exiting.."
    fi
}

case "$1" in
    'start')
        start
        ;;
    'stop')
        stop
        ;;
    'cleanup')
        cleanup
        ;;
    'destroy')
        destroy
        ;;
    *)
        log_info "Usage: $0 { start | stop | destroy | cleanup}"
        exit 1
        ;;
esac
